name: Build, test (and publish)

on:
  push:

jobs:
  tests:
    name: Run tests

    strategy:
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
        os:
          - "ubuntu-latest"
          - "macos-latest"
          - "windows-latest"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      # Installing via `pipx` is 'fully supported', so no need for
      # https://github.com/snok/install-poetry, which is a bit slower. See also
      # https://python-poetry.org/docs/master/#installing-with-pipx
      - name: Install Poetry
        run: pipx install poetry

        # Counterintuitively, the Python setup step itself is setup *after* installing
        # `poetry`, else the `poetry` command isn't found and the setup step fails. See
        # also:
        # https://github.com/marketplace/actions/setup-python#caching-packages-dependencies
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry

      - name: Set up Python environment
        # `poetry env use` instructs all `poetry` runs to go through the correct (NOT
        # the default aka system) Python environment, see also:
        # https://github.com/actions/setup-python/issues/374#issuecomment-1088938718
        # As long as we then call all actions via `poetry run ...`, we're fine.
        run: |
          poetry env use ${{ matrix.python-version }}
          poetry install

      - name: Set up 'just' command runner
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run linting
        run: just check-lint

      - name: Check code formatting
        run: just check-format

      - name: Run type checks
        run: just check-types

      - name: Run tests
        run: just test

  release-please:
    name: Execute release chores

    runs-on: ubuntu-latest
    needs: tests

    outputs:
      created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: python
          package-name: betterletter

  publish:
    name: Publish to PyPI

    runs-on: ubuntu-latest
    needs: release-please
    if: ${{ needs.release-please.outputs.created }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: poetry

      - name: Set up Python environment
        run: |
          poetry env use 3.10
          poetry install
      - name: Build package
        run: poetry build

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@v1.6.4
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
